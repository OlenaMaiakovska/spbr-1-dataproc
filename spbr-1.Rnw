% Licence, CC-BY
\documentclass[compress, ucs]{beamer}
\usepackage[T2A]{fontenc}
\usepackage[utf8x]{inputenc}
\usepackage[english, russian]{babel}
\usepackage{amssymb}
\usepackage{url}
% Breaking long urls on hyphens
\makeatletter
\g@addto@macro{\UrlBreaks}{\UrlOrds}
\makeatother
\usepackage{pscyr}
\usepackage{graphicx}
\usetheme{Warsaw}
\usecolortheme{beaver}
\usefonttheme{professionalfonts}
\beamertemplatenavigationsymbolsempty
\setbeamertemplate{headline}{}
\expandafter\def\expandafter\insertshorttitle\expandafter{%
\insertshorttitle\hfill%
\insertframenumber\,/\,\inserttotalframenumber}

\makeatletter
\definecolor{beaverred}{RGB}{142, 19, 19}
\setbeamertemplate{enumerate items}{\color{beaverred}$\blacklozenge$}
\setbeamertemplate{itemize items}{\color{beaverred}$\blacklozenge$}
\setbeamertemplate{section in toc}[square]
\setbeamertemplate{subsection in toc}[square]
\makeatother
% --------------------------------------------------------------
% Setting up some knitr options
<<setup, include=FALSE>>=
library(knitr)
library(tidyr)
library(dplyr)
library(magrittr)
opts_chunk$set(eval=TRUE, echo=TRUE, warning=FALSE,
               cache=TRUE, message=FALSE, tidy=FALSE, background="#E1E1E1",
               fig.width=6, fig.height=4, out.width=".75\\linewidth", fig.show="hold",
               size = "scriptsize")
options(width = 60, stringsAsFactors = FALSE)
knit_hooks$set(inline = function(x) {
  if (is.numeric(x)) return(knitr:::format_sci(x, "latex"))
  knitr:::hi_latex(x)
})
@
% --------------------------------------------------------------
\begin{document}
\title[dplyr/tidyr/magrittr]{\normalsize Современный взгляд на предобработку данных: \\
dplyr, tidyr и magrittr}
\author{Антон Антонов}
\date{28 марта 2015}
%\institute{\textbf {SPb R User Group}}
\titlegraphic{\includegraphics[width=2cm]{logo}}
%\email{tonytonov@gmail.com}
\maketitle
% --------------------------------------------------------------
\begin{frame}[fragile]{Цикл жизни данных в R}
\begin{center}
\includegraphics[width=\linewidth]{cycle}
\end{center}
\pause
\begin{itemize}
\item tidyr 0.2 (Hadley Wickham, RStudio)
\item dplyr 0.4 (Hadley Wickham, Roman Francois, RStudio)
\item magrittr 1.5 (Stefan Milton Bache, Hadley Wickham)
\end{itemize}
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%>\%}
При необходимости последовательно вызвать несколько функций подряд есть следующие возможности.
\pause
\begin{itemize}
\item Вложенные вызовы (nested calls):
<<magrittr-1, eval=FALSE>>=
arrange(
  summarize(
    filter(data, variable == 42),
    Total = sum(variable)
  ),
  desc(Total)
)
@
\pause
\item Создание промежуточных переменных:
<<magrittr-2, eval=FALSE>>=
a <- filter(data, variable == 42)
b <- summarise(a, Total = sum(variable))
c <- arrange(b, desc(Total))
@
\pause
\item Конвейеры (pipes) при помощи оператора \%>\%:
<<magrittr-3, eval=FALSE>>=
data %>%
  filter(variable == 42) %>%
  summarise(Total = sum(variable)) %>%
  arrange(desc(Total))
@
\end{itemize}
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%>\%}
Следующий кусок кода содержит вложенные вызовы, формулу с точкой и анонимную функцию.
<<magrittr-4>>=
car_data <-
  subset(
    transform(
      aggregate(
        . ~ cyl,
        data = mtcars[mtcars$hp > 100, ],
        FUN = function(x) round(mean(x), 2)
      ),
      kpl = mpg * 0.4251
    ),
    select = c(cyl, hp, kpl)
  )
print(car_data)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%>\%}
Используем оператор, работающий по двум основным правилам:
<<magrittr-5, eval=FALSE>>=
x %>% f(y)            # same as f(x, y)
x %>% g(y, param = .) # same as g(y, param = x)
@
\pause
Тот же код в виде конвейера:
<<magrittr-6>>=
library(magrittr)
car_data <-
  mtcars %>%
  subset(hp > 100) %>%
  aggregate(. ~ cyl, data = .,
            FUN = function(x) round(mean(x), 2)) %>%
  transform(kpl = mpg * 0.4251) %>%
  subset(select = c(cyl, hp, kpl)) %>%
  print
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%>\%}
Конвейеры можно (но не нужно) использовать практически везде:
<<magrittr-7>>=
car_data <-
  mtcars %>%
  `[`(.$hp > 100, ) %>%
  aggregate(. ~ cyl, data = .,
            FUN = . %>% mean %>% round(2)) %>%
  transform(kpl = mpg %>% multiply_by(0.4251)) %>%
  subset(select = c(cyl, hp, kpl)) %>%
  print
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{Tidy data}
Концепция ``tidy data'':
\begin{itemize}
\item каждая колонка (столбец) -- переменная;
\item каждый ряд (строка) -- наблюдение.
\end{itemize}
\pause
\begin{center}
\includegraphics[width=0.5\linewidth]{tidy1}
\end{center}
\par
\pause
Для R такой формат данных наиболее естественен из-за векторизованности многих базовых операций.
\begin{center}
\includegraphics[width=0.3\linewidth]{tidy2}
\end{center}
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{tidyr}
Возьмём результат некоторого воображаемого эксперимента:
<<tidyr-1, echo=FALSE>>=
set.seed(10)
messy <- data.frame(
  id = 1:4,
  group = sample(rep(c("control", "treatment"), each = 2)),
  work.T1 = runif(4),
  home.T1 = runif(4),
  work.T2 = runif(4),
  home.T2 = runif(4)
)
@
<<tidyr-2>>=
messy
@
\pause
Почему это не ``tidy data''?
\pause
\begin{itemize}
\item Переменные места и времени смешаны;
\item Одной строке соответствует четыре наблюдения.
\end{itemize}
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{tidyr::gather}
Преобразуем данные из т.н. ``широкого'' формата в ``длинный'' (wide to long):
<<tidyr-3>>=
tidier <- messy %>%
  gather(key, bpr, -id, -group)
tidier %>% head(8)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{tidyr::spread}
Обратное преобразование (long to wide):
<<tidyr-4>>=
tidier %>%
  spread(key, bpr) %>%
  print %>%
  all.equal(messy)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{tidyr::separate}
Разделяем переменные:
<<tidyr-5>>=
tidy <- tidier %>%
  separate(key, into = c("location", "time"), sep = "\\.")
tidy %>% head(8)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{tidyr::unite}
Склеиваем переменные обратно:
<<tidyr-6>>=
tidy %>%
  unite(key, location, time, sep = ".") %>%
  head(8)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{dplyr::select}
Выбираем подмножество столбцов (переменных):
<<dplyr-1>>=
tidy %>%
  select(id, group, location, bpr) %>%
  head(8)
@
\pause
<<dplyr-2, eval=FALSE>>=
tidy %>% select(1:3, 5)
tidy %>% select(id:location, starts_with("b"))
tidy %>% select(-time)
tidy %>% select(-contains("m"))
tidy %>% select(-matches("t.m"))
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{dplyr::filter}
Выбираем подмножество строк (наблюдений):
<<dplyr-3>>=
tidy %>%
  filter(group == "control", bpr > 0.5, id %in% 4:5)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{dplyr::group\_by, dplyr::summarize}
Агрегация по группам:
<<dplyr-4>>=
tidy %>%
  group_by(time, location) %>%
  summarize(mean_t = mean(bpr), sd_t = sd(bpr))
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{dplyr::arrange}
Сортировка (например, в разных направлениях по разным переменным):
<<dplyr-5>>=
tidy %>%
  arrange(time, desc(bpr))
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{dplyr::mutate}
Создание новых переменных:
<<dplyr-6>>=
tidy %>%
  mutate(perc = bpr/sum(bpr),
         cperc = cumsum(perc)) %>%
  select(id, bpr:cperc)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{SQL joins}
Для иллюстрации join рассмотрим два набора данных:
<<dplyr-7, echo=FALSE>>=
df1 <- data.frame(Name = c("Roger Waters", "David Gilmour", "Syd Barrett", "Richard Wright", "Nick Mason"),
                  Instrument = c("Bass", "Guitar", "Bass", "Keyboards", "Drums"))
df2 <- data.frame(Instrument = c("Bass", "Guitar", "Violin"),
                  StrCount = c(4, 6, 4))
@
<<dplyr-8>>=
df1
df2
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{SQL joins}
Всем известные joins:
<<dplyr-9>>=
left_join(df1, df2, "Instrument")
full_join(df1, df2, "Instrument")
#right_join(df1, df2, "Instrument")
#inner_join(df1, df2, "Instrument")
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{SQL joins}
Не настолько известные, но тоже joins:
<<dplyr-10>>=
semi_join(df1, df2, "Instrument")
anti_join(df1, df2, "Instrument")
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
Небольшая демонстрация быстродействия dplyr (трудоёмкие операции написаны на C++).
<<benchmark-1>>=
library(rbenchmark)
set.seed(11)
n <- 10e6
m <- 100
d <- data_frame(x = sample(m, n, replace=TRUE), y = runif(n))
dm <- data_frame(x = sample(m))
l <- vector("list", 5)
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
<<benchmark-2>>=
benchmark(
  d[d$x>=10 & d$x<20,],
  d %>% filter(x>=10, x<20),
  replications=5,
  columns=c("test", "elapsed", "relative"),
  order=NULL
) %>% print -> l[[1]]
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
<<benchmark-3>>=
benchmark(
  d[order(d$x), ],
  d %>% arrange(x),
  replications=5,
  columns=c("test", "elapsed", "relative"),
  order=NULL
) %>% print -> l[[2]]
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
<<benchmark-4>>=
benchmark(
  d$y2 <- d$y + d$x/2,
  d %>% mutate(y2 = y + x/2),
  replications=5,
  columns=c("test", "elapsed", "relative"),
  order=NULL
) %>% print -> l[[3]]
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
<<benchmark-5>>=
benchmark(
  tapply(d$y, d$x, mean),
  d %>% group_by(x) %>% summarize(ym = mean(y)),
  replications=5,
  columns=c("test", "elapsed", "relative"),
  order=NULL
) %>% print -> l[[4]]
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
<<benchmark-6>>=
benchmark(
  merge(d, dm, by="x"),
  d %>% inner_join(dm, by="x"),
  replications=1,
  columns=c("test", "elapsed", "relative"),
  order=NULL
) %>% print -> l[[5]]
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{rbenchmarking}
Сводная таблица быстродействия 
\par
(относительное время исполнения, меньше -- лучше):
\begin{center}
  \begin{tabular}{ c | c | c | c | c | c }
    \hline
          & Filter & Sort & New Variable & Aggregation & Join \\ \hline
    base  & \Sexpr{l[[1]]$relative[1]}
          & \Sexpr{l[[2]]$relative[1]}
          & \Sexpr{l[[3]]$relative[1]}
          & \Sexpr{l[[4]]$relative[1]}
          & \Sexpr{l[[5]]$relative[1]} \\ \hline
    dplyr & \Sexpr{l[[1]]$relative[2]}
          & \Sexpr{l[[2]]$relative[2]}
          & \Sexpr{l[[3]]$relative[2]}
          & \Sexpr{l[[4]]$relative[2]}
          & \Sexpr{l[[5]]$relative[2]} \\
    \hline
  \end{tabular}
\end{center}
\pause
Интересный факт: в Rstudio оператор \%>\% имеет своё сочетание горячих клавиш (Ctrl + Shift + M)! 
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%<>\%}
С помощью конвейеров можно создавать не только анонимные функции:
<<magrittr-final-1>>=
0 %>% cos %>% sin
f <- . %>% cos %>% sin
f(0)
sin(cos(0))
@
\pause
Есть ещё несколько конвейерных операторов, в том числе присваивающий...
<<magrittr-final-2, eval=FALSE>>=
df <- na.omit(df)
df %<>% na.omit
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}[fragile]{magrittr::\%T>\%}
... и Tee operator (производит side-effect):
<<magrittr-final-3>>=
mtcars %>%
  subset(cyl == 4, c(mpg, hp)) %T>%
  plot %>%
  colMeans
@
\end{frame}
% --------------------------------------------------------------
\begin{frame}{Ссылки}
При подготовке доклада были использованы следующие материалы:
\footnotesize{
\begin{itemize}
\item \url{https://github.com/hadley/tidyr}
\item \url{https://github.com/hadley/dplyr}
\item \url{https://github.com/smbache/magrittr}
\pause
\item \url{http://rpubs.com/bradleyboehmke/data_wrangling}
\item \url{http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf}
\pause
\item \url{http://datascience.la/dplyr-and-a-very-basic-benchmark/}
\item \url{http://zevross.com/blog/2015/01/13/a-new-data-processing-workflow-for-r-dplyr-magrittr-tidyr-ggplot2/}
\end{itemize}
\pause
\begin{center}
\Large{Спасибо!}
\end{center}
}
\end{frame}
% --------------------------------------------------------------
\end{document}
